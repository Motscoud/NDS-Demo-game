/*---------------------------------------------------------------------------------

	$Id: main.cpp,v 1.13 2008-12-02 20:21:20 dovoto Exp $

	Simple console print demo
	-- dovoto


---------------------------------------------------------------------------------*/
#include <nds.h>
#include <gl2d.h>
#include <stdio.h>
#include <algorithm>
#include "Character.h"
#include "Platform.h"
//GRIT header - I hope this works
#include "player.h"
#include "platformspr.h"

using namespace std;

volatile int frame = 0;
int x = 128, y = 0;
// int p.x = 128, p.y = 170;
// int p.width = 32, p.height=32;
int gravity = 7; // 0.1
int vel = 0; // *10
int velx = 0;
bool grounded;
int scrollX = 0;
int deadZoneL = 40;
int deadZoneR = 160;
int scrollY = 0;
int deadZoneT = 64;
int deadZoneB = 144;
int jumpFrames = 0;
int lastDPadPressTime = 0;
bool isDashing = false;
int PlayerColor = 142;
int PlayerColor2 = 255;
int dashDuration = 0;
bool onTurn = false;

	
//Three Platforms in an Array.
//These make up the level
Platform platforms[] = {
    {0, 180, 4028, 64},
    {128, 120, 32, 16},
	{640, 128, 32, 16},
    {704, 96, 32, 16},
    {768, 64, 32, 16},
    {832, 128, 32, 16},
    {896, 96, 32, 16},
    {960, 64, 32, 16},
    {1024, 128, 32, 16},
	{1088, 96, 32, 16},
    {1152, 64, 32, 16},
    {1216, 128, 32, 16},
    {1280, 96, 32, 16},
    {1344, 64, 32, 16},
    {1408, 128, 32, 16},
    {1472, 96, 32, 16},
    {1536, 64, 32, 16},
    {1600, 128, 32, 16},
    {1664, 96, 32, 16},
    {1728, 64, 32, 16},
    {1792, 128, 32, 16},
    {1856, 96, 32, 16},
    {1920, 64, 32, 16},
    {1984, 128, 32, 16},
    {2048, 96, 32, 16}
};


//How many platforms are there, in a level there will be a lot of these.
int num_platforms = sizeof(platforms) / sizeof(Platform);

//---------------------------------------------------------------------------------
int main(void) {
//---------------------------------------------------------------------------------
    glImage player[1];
    glImage platformspr[1];

	videoSetMode(MODE_5_3D);
    consoleDemoInit();

    vramSetBankA( VRAM_A_TEXTURE );
    vramSetBankE(VRAM_E_TEX_PALETTE);

    glScreen2D();

        glLoadTileSet( player,            // pointer to glImage array
                   16,                // sprite width
                   16,                // sprite height
                   16,                // bitmap image width
                   16,                // bitmap image height
                   GL_RGB16,        // texture type for glTexImage2D() in videoGL.h 16 colors
                   TEXTURE_SIZE_16,    // sizeX for glTexImage2D() in videoGL.h
                   TEXTURE_SIZE_16,    // sizeY for glTexImage2D() in videoGL.h
                                    // Set texture params setting color 0 as transparent
                   GL_TEXTURE_WRAP_S|GL_TEXTURE_WRAP_T|TEXGEN_OFF|GL_TEXTURE_COLOR0_TRANSPARENT,
                   256,                    // Length of the palette to use (256 colors)
                   (u16*)playerPal,    // Load our 16 color shuttle palette
                    (u8*)playerBitmap  // image data generated by GRIT
                 );
        glLoadTileSet( platformspr,            // pointer to glImage array
                   32,                // sprite width
                   16,                // sprite height
                   32,                // bitmap image width
                   16,                // bitmap image height
                   GL_RGB16,        // texture type for glTexImage2D() in videoGL.h 16 colors
                   TEXTURE_SIZE_16,    // sizeX for glTexImage2D() in videoGL.h
                   TEXTURE_SIZE_16,    // sizeY for glTexImage2D() in videoGL.h
                                    // Set texture params setting color 0 as transparent
                   GL_TEXTURE_WRAP_S|GL_TEXTURE_WRAP_T|TEXGEN_OFF|GL_TEXTURE_COLOR0_TRANSPARENT,
                   256,                    // Length of the palette to use (256 colors)
                   (u16*)platformsprPal,    // Load our 16 color shuttle palette
                    (u8*)platformsprBitmap  // image data generated by GRIT
                 );
                  iprintf("\x1b[1;1HSprite Import Test");
    // calculate the amount of
    // memory uploaded to VRAM in KB
    int TextureSize = playerBitmapLen + platformsprBitmapLen;

    Character Pplayer;

    
	while(1) {
		glBegin2D();
        glSprite( 16* 0, 0, GL_FLIP_NONE, platformspr );
        //smelly hack
        //vector<Platform> platformsVector(platforms, platforms + sizeof(platforms) / sizeof(Platform));
        Pplayer.update(platforms,num_platforms, scrollX, scrollY);

if (x < deadZoneL){
    x = deadZoneL;
    scrollX -= 2; // Scroll to the left
}
else if(x > deadZoneR) {
    x = deadZoneR;
    scrollX += 2; // Scroll to the right
}

// Update screen's y-coordinate based on player's y-coordinate
if (y < deadZoneT){
    scrollY -= 2; // Scroll upwards
}
else if(y > deadZoneB) {
    scrollY += 2; // Scroll downwards
}

// Ensure scrollX doesn't go below 0 or above the level width
scrollX = max(0, min(scrollX, 40289 - 256));

if(x - scrollX > 256) {
    x = 0;
    scrollX = 0;
}

if (isDashing){
    PlayerColor = 0;
    PlayerColor2 = 0;
}else{
    PlayerColor = 142;
    PlayerColor2 = 255;
}
    Pplayer.draw(player);
   	for(int i = 0; i < num_platforms; i++){
    Platform p = platforms[i];
    int platform_screen_x = p.x - scrollX;
    int platform_screen_y = p.y - scrollY;

    // Draw the sprite at the platform's position, scaled to the platform's size
    glSpriteScaleXY(platform_screen_x, platform_screen_y, 
                    inttof32(p.width) / 32, 
                    inttof32(p.height) / 16, 
                    GL_FLIP_NONE, platformspr);
}

		iprintf("\x1b[10;0HScrollx = %d",scrollX,TextureSize);
		
		glFlush(0);
		swiWaitForVBlank();
	}

	return 0;
}
